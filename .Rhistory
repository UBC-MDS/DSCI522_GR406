quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
ci_plot <- river_flow_2 %>% ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.1))
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.1)) +
theme(legend.title = element_blank(),
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "River flow by day of the year",
y = "Flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.1)) +
theme(
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "River flow by day of the year",
y = "Flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.1)) +
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18),
legend.position = "none") +
labs(title = "River flow by day of the year",
y = "Flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
# Plot the data with overlaid prediction interval
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.1)) +
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18),
legend.position = "none") +
labs(title = "95% Prediction interval for river",
y = "Flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
# Plot the data with overlaid prediction interval
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.1, color = "red", fill = "red")) +
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18),
legend.position = "none") +
labs(title = "95% Prediction Interval for River Flow",
y = "Flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
# Plot the data with overlaid prediction interval
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.1, color = "red", fill = "red")) +
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18),
legend.position = "none") +
labs(title = "95% Prediction interval for daily river flow",
y = "flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
# Plot the data with overlaid prediction interval
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.05, color = "red", fill = "red")) +
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18),
legend.position = "none") +
labs(title = "95% Prediction interval for daily river flow",
y = "flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
# Plot the data with overlaid prediction interval
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.05, color = "red")) +
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18),
legend.position = "none") +
labs(title = "95% Prediction interval for daily river flow",
y = "flow (m^3/s)")
ci_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
# Plot the data with overlaid prediction interval
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.0005, color = "red", fill = "red")) +
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18),
legend.position = "none") +
labs(title = "95% Prediction interval for daily river flow",
y = "flow (m^3/s)")
ci_plot
print(predict(quant_005_mod, newdata = day_160))
print(predict(quant_095_mod, newdata = day_160))
lower_lim <- predict(quant_005_mod, newdata = day_160)
upper_lim <- predict(quant_095_mod, newdata = day_160)
paste("Prediction interval for river flow on day 160: (", lower_lime, "), ")
lower_lim <- predict(quant_005_mod, newdata = day_160)
upper_lim <- predict(quant_095_mod, newdata = day_160)
paste("Prediction interval for river flow on day 160: (", lower_lim, "), ")
lower_lim <- predict(quant_005_mod, newdata = day_160)
upper_lim <- predict(quant_095_mod, newdata = day_160)
paste("Prediction interval for river flow on day 160: (", round(lower_lim, 2), "), ",
round(upper_lim,2), ")")
lower_lim <- predict(quant_005_mod, newdata = day_160)
upper_lim <- predict(quant_095_mod, newdata = day_160)
paste("Prediction interval for river flow on day 160: (", round(lower_lim, 2),
round(upper_lim,2), ")")
lower_lim <- predict(quant_005_mod, newdata = day_160)
upper_lim <- predict(quant_095_mod, newdata = day_160)
paste("Prediction interval for river flow on day 160: (", round(lower_lim, 2),",",
round(upper_lim,2), ")")
lower_lim <- predict(quant_005_mod, newdata = day_160)
upper_lim <- predict(quant_095_mod, newdata = day_160)
paste0("Prediction interval for river flow on day 160: (", round(lower_lim, 2),",",
round(upper_lim,2), ")")
lower_lim <- predict(quant_005_mod, newdata = day_160)
upper_lim <- predict(quant_095_mod, newdata = day_160)
paste0("Prediction interval for river flow on day 160: (", round(lower_lim, 2),", ",
round(upper_lim,2), ")")
# filter for the days we are interested in and then plot the densities
river_flow %>% filter(day == 160 | day == 300) %>%
ggplot(aes(x=flow)) +
geom_density(aes(fill = as.factor(day)), alpha = 0.3) +
theme(legend.title = element_text(size = 12),
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "River flow by day of the year",
y = "flow (m^3/s)")
# filter for the days we are interested in and then plot the densities
river_flow %>% filter(day == 160 | day == 300) %>%
ggplot(aes(x=flow)) +
geom_density(aes(fill = as.factor(day)), alpha = 0.3) +
theme(legend.title = element_text(size = 12),
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "Probabalistic forecasts of river flow",
y = "")
# filter for the days we are interested in and then plot the densities
river_flow %>% filter(day == 160 | day == 300) %>%
ggplot(aes(x=flow)) +
geom_density(aes(fill = as.factor(day)), alpha = 0.3) +
theme(legend.title = element_text(size = 12),
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "Probabalistic forecasts of river flow",
x = "flow (m^3/s)",
y = "")
# filter for the days we are interested in and then plot the densities
river_flow %>% filter(day == 160 | day == 300) %>%
ggplot(aes(x=flow)) +
geom_density(aes(fill = as.factor(day)), alpha = 0.3) +
theme(legend.title = element_text(size = 12),
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "Probabalistic forecasts of river flow",
x = "flow (m^3/s)",
y = "",
fill = "kah")
# filter for the days we are interested in and then plot the densities
river_flow %>% filter(day == 160 | day == 300) %>%
ggplot(aes(x=flow)) +
geom_density(aes(fill = as.factor(day)), alpha = 0.3) +
theme(legend.title = element_text(size = 12),
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "Probabalistic forecasts of river flow",
x = "flow (m^3/s)",
y = "",
fill = "Day")
# filter for the days we are interested in and then plot the densities
river_flow %>% filter(day == 160 | day == 300) %>%
ggplot(aes(x=flow)) +
geom_density(aes(fill = as.factor(day)), alpha = 0.3) +
theme(legend.title = element_text(size = 12),
axis.text = element_text(size=18),
axis.title = element_text(size=18)) +
labs(title = "Probabilistic forecasts of river flow",
x = "flow (m^3/s)",
y = "",
fill = "day")
# define model for 0.75 quantile
quant_075_mod <- rqss(flow ~ qss(day, lambda = 30), tau = 0.75, data = river_flow)
# Create predictions for the 0.75 quantile model
quantile_075_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(quant_075_mod)
# Plot 75% quantile function overtop of the data
quantile_plot <- river_flow %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.15) +
geom_line(aes(day, pred, colour = "0.75 quantile of river flow"),
data = quantile_075_grid) +
theme(legend.title = element_blank(),
axis.text = element_text(size=18),
axis.title = element_text(size=18),
plot.title = element_text(size=20)) +
labs(title = "River flow by day of the year",
y = "flow (m^3/s)")
quantile_plot
# Model for median river flow
med_model <- rqss(flow ~ qss(day, lambda = 100), tau = .5, data = river_flow)
# Create predictions for the median model
med_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(med_model)
# Model for mean fiver flow
mean_model <- loess(flow ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
mean_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_model)
# Plot the data overlaid with the prediction functions
ggplot(river_flow, aes(day, flow)) +
geom_point(alpha=0.15) +
geom_line(aes(day, pred, colour = "Median rqss regression"), data = med_grid) +
geom_line(aes(day, pred, colour = "Mean loess regression"), data = mean_grid) +
theme(legend.title = element_blank(),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18)) +
labs(title = "River flow by day of the year",
y = "flow (m^3/s)")
# define model for 0.75 quantile
quant_075_mod <- rqss(flow ~ qss(day, lambda = 30), tau = 0.75, data = river_flow)
# Create predictions for the 0.75 quantile model
quantile_075_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(quant_075_mod)
# Plot 75% quantile function overtop of the data
quantile_plot <- river_flow %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.15) +
geom_line(aes(day, pred, colour = "0.75 quantile of river flow"),
data = quantile_075_grid) +
theme(legend.title = element_blank(),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18)) +
labs(title = "River flow by day of the year",
y = "flow (m^3/s)")
quantile_plot
# Fit a model for 95% percentile
quant_095_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.95, data = river_flow)
# Fit a model for 5% percentile
quant_005_mod <- rqss(flow ~ qss(day, lambda = 15), tau = 0.05, data = river_flow)
# get predictions
upper_preds <- c(predict(quant_095_mod, newdata = river_flow))
lower_preds <- c(predict(quant_005_mod, newdata = river_flow))
# Bind into a new dataframe for plotting
river_flow_2 <- cbind(river_flow, lower_preds, upper_preds)
# Plot the data with overlaid prediction interval
ci_plot <- river_flow_2 %>%
ggplot(aes(x = day, y = flow)) +
geom_point(alpha = 0.2) +
geom_ribbon(aes(ymin = lower_preds, ymax = upper_preds,
alpha = 0.0005, color = "red", fill = "red")) +
theme(axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18),
legend.position = "none") +
labs(title = "95% Prediction interval for daily river flow",
y = "flow (m^3/s)")
ci_plot
# filter for the days we are interested in and then plot the densities
river_flow %>% filter(day == 160 | day == 300) %>%
ggplot(aes(x=flow)) +
geom_density(aes(fill = as.factor(day)), alpha = 0.3) +
theme(legend.title = element_text(size = 12),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18)) +
labs(title = "Probabilistic forecasts of river flow",
x = "flow (m^3/s)",
y = "",
fill = "day")
# Model for mean fiver flow
mean_log_loess <- loess(log(flow) ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
log_loess_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_log_loess)
# Plot the log flow with mean prediction overlaid
mean_log_flow <- river_flow %>% ggplot(aes(x = day, y = log(flow))) +
geom_point(alpha = 0.2) +
geom_line(aes(day, pred), data = log_loess_grid, colour="red")
mean_log_flow
# Model for mean fiver flow
mean_log_loess <- loess(log(flow) ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
log_loess_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_log_loess)
# Plot the log flow with mean prediction overlaid
mean_log_flow <- river_flow %>% ggplot(aes(x = day, y = log(flow))) +
geom_point(alpha = 0.2) +
geom_line(aes(day, pred), data = log_loess_grid, colour="red") +
theme(axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18)) +
labs(title = "Probabilistic forecasts of river flow",
x = "day",
y = "Log(flow) m^3/s")
mean_log_flow
# Model for mean fiver flow
mean_log_loess <- loess(log(flow) ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
log_loess_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_log_loess)
# Plot the log flow with mean prediction overlaid
mean_log_flow <- river_flow %>% ggplot(aes(x = day, y = log(flow))) +
geom_point(alpha = 0.2) +
geom_line(aes(day, pred), data = log_loess_grid, colour="red") +
theme(axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18)) +
labs(title = "Mean daily estimates of log(flow)",
x = "day",
y = "log(flow) m^3/s")
mean_log_flow
# Model for mean fiver flow
mean_log_loess <- loess(log(flow) ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
log_loess_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_log_loess)
# Plot the log flow with mean prediction overlaid
mean_log_flow <- river_flow %>% ggplot(aes(x = day, y = log(flow))) +
geom_point(alpha = 0.2) +
geom_line(aes(day, pred, colour="red"), data = log_loess_grid) +
theme(axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18)) +
labs(title = "Mean daily estimates of log(flow)",
x = "day",
y = "log(flow) m^3/s")
mean_log_flow
# Model for mean fiver flow
mean_log_loess <- loess(log(flow) ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
log_loess_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_log_loess)
# Plot the log flow with mean prediction overlaid
mean_log_flow <- river_flow %>% ggplot(aes(x = day, y = log(flow))) +
geom_point(alpha = 0.2) +
geom_line(aes(day, pred, colour="red"), data = log_loess_grid) +
theme(axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18),
legend.title = element_text(size = 12)) +
labs(title = "Mean daily estimates of log(flow)",
x = "day",
y = "log(flow) m^3/s",
fill = "huzz")
mean_log_flow
# Model for mean fiver flow
mean_log_loess <- loess(log(flow) ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
log_loess_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_log_loess)
# Plot the log flow with mean prediction overlaid
mean_log_flow <- river_flow %>% ggplot(aes(x = day, y = log(flow))) +
geom_point(alpha = 0.2) +
geom_line(aes(day, pred,
colour = "mean estimate of log(flow)"),
data = log_loess_grid) +
theme(axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18),
legend.title = element_empty()) +
labs(title = "Mean daily estimates of log(flow)",
x = "day",
y = "log(flow) m^3/s")
# Model for mean fiver flow
mean_log_loess <- loess(log(flow) ~ day, data = river_flow, span = 0.2, degree = 2)
# Create predictions for the mean model
log_loess_grid <-
river_flow %>%
data_grid(day) %>%
add_predictions(mean_log_loess)
# Plot the log flow with mean prediction overlaid
mean_log_flow <- river_flow %>% ggplot(aes(x = day, y = log(flow))) +
geom_point(alpha = 0.2) +
geom_line(aes(day, pred,
colour = "mean estimate of log(flow)"),
data = log_loess_grid) +
theme(axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(size=18),
legend.title = element_blank()) +
labs(title = "Mean daily estimates of log(flow)",
x = "day",
y = "log(flow) m^3/s")
mean_log_flow
